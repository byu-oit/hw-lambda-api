name: CI/CD Pipeline

on:
  push:
    branches: [dev, stg, master]
env:
  node_version: "12.x"
  tf_version: "0.12.26" # must match value in terraform-iac/*/app/main.tf

jobs:
  env:
    name: Set Env Vars
    runs-on: ubuntu-latest
    steps:
      - name: Set up DEV Environment Variables
        if: github.ref == 'refs/heads/dev'
        run: |
          matrix='{
            "env":[
              {
                "tf_working_dir":"./terraform-iac/dev/app",
                "aws_key_name":"byu_oit_terraform_dev_key",
                "aws_secret_name":"byu_oit_terraform_dev_secret",
                "rfc_key_name":"standard_change_sandbox_client_key",
                "rfc_secret_name":"standard_change_sandbox_client_secret",
                "rfc_template_id":"Codepipeline-Standard-Change",
                "slack_channel":"#slack-bot-testing"
              }
            ]
          }'
          echo matrix=`echo $matrix | jq -c .` >> $GITHUB_ENV

      - name: Set up STG Environment Variables
        if: github.ref == 'refs/heads/stg'
        run: |
          matrix='{
            "env":[
              {
                "tf_working_dir":"./terraform-iac/stg/app",
                "aws_key_name":"byu_oit_terraform_dev_key",
                "aws_secret_name":"byu_oit_terraform_dev_secret",
                "rfc_key_name":"standard_change_sandbox_client_key",
                "rfc_secret_name":"standard_change_sandbox_client_secret",
                "rfc_template_id":"Codepipeline-Standard-Change",
                "slack_channel":"#slack-bot-testing"
              }
            ]
          }'
          echo matrix=`echo $matrix | jq -c .` >> $GITHUB_ENV

      - name: Set up PRD/CPY Environment Variables
        if: github.ref == 'refs/heads/master'
        # TODO: When prd really is production, in prd environment (first block below):
        # * Change standard_change_sandbox_client_key to standard_change_production_client_key
        # * Change standard_change_sandbox_client_secret to standard_change_production_client_secret
        # You probably don't want to do this in cpy (second block), or you will get two RFCs everytime you push to master
        run: |
          matrix='{
            "env":[
              {
                "tf_working_dir":"./terraform-iac/prd/app",
                "aws_key_name":"byu_oit_terraform_prd_key",
                "aws_secret_name":"byu_oit_terraform_prd_secret",
                "rfc_key_name":"standard_change_sandbox_client_key",
                "rfc_secret_name":"standard_change_sandbox_client_secret",
                "rfc_template_id":"Codepipeline-Standard-Change",
                "slack_channel":"#slack-bot-testing"
              },
              {
                "tf_working_dir":"./terraform-iac/cpy/app",
                "aws_key_name":"byu_oit_terraform_prd_key",
                "aws_secret_name":"byu_oit_terraform_prd_secret",
                "rfc_key_name":"standard_change_sandbox_client_key",
                "rfc_secret_name":"standard_change_sandbox_client_secret",
                "rfc_template_id":"Codepipeline-Standard-Change",
                "slack_channel":"#slack-bot-testing"
              }
            ]
          }'
          echo matrix=`echo $matrix | jq -c .` >> $GITHUB_ENV

    outputs:
      matrix: ${{ env.matrix }}

  build_and_deploy:
    name: Build and Deploy Lambda API
    runs-on: ubuntu-latest
    needs: env
    strategy:
      matrix: ${{ fromJson(needs.env.outputs.matrix) }}
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Disallow Concurrent Runs
        uses: byu-oit/github-action-disallow-concurrent-runs@v2
        with:
          token: ${{ github.token }}

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.node_version }}

      - name: Audit App Lambda
        working-directory: src
        run: npm audit --audit-level=critical

      - name: Build App Lambda
        working-directory: src
        run: npm install --production

      - name: Lint App Lambda
        working-directory: src
        run: npm run lint

      - name: Test App Lambda
        working-directory: src
        run: npm test

      - name: Package App Lambda
        working-directory: src
        run: zip -r lambda.zip *

      - name: Audit Test Lambda
        working-directory: tst/codedeploy-hooks/after-allow-test-traffic
        run: npm audit --audit-level=critical

      - name: Build Test Lambda
        working-directory: tst/codedeploy-hooks/after-allow-test-traffic
        run: |
          npm install --production
          cp -R ../../../.postman .

      - name: Lint Test Lambda
        working-directory: tst/codedeploy-hooks/after-allow-test-traffic
        run: npm run lint

      - name: Test Test Lambda
        working-directory: tst/codedeploy-hooks/after-allow-test-traffic
        run: npm test

      - name: Package Test Lambda
        working-directory: tst/codedeploy-hooks/after-allow-test-traffic
        run: zip -r lambda.zip * .postman

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets[matrix.env.aws_key_name] }}
          aws-secret-access-key: ${{ secrets[matrix.env.aws_secret_name] }}
          aws-region: us-west-2

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.tf_version }}

      - name: Terraform Init
        working-directory: ${{ matrix.env.tf_working_dir }}
        run: terraform init

      - name: Terraform Format
        working-directory: "./"
        run: terraform fmt -check -recursive

      - name: Terraform Plan
        working-directory: ${{ matrix.env.tf_working_dir }}
        run: terraform plan -input=false -out=plan

      - name: Start Standard Change
        uses: byu-oit/github-action-start-standard-change@v1
        id: start-standard-change
        with:
          client-key: ${{ secrets[matrix.env.rfc_key_name] }}
          client-secret: ${{ secrets[matrix.env.rfc_secret_name] }}
          template-id: ${{ matrix.env.rfc_template_id }}

      - name: Terraform Apply
        working-directory: ${{ matrix.env.tf_working_dir }}
        run: terraform apply plan

      - name: Get CD App Name
        id: cd-app-name
        working-directory: ${{ matrix.env.tf_working_dir }}
        run: terraform output codedeploy_app_name

      - name: Get CD Deployment Group Name
        id: cd-group-name
        working-directory: ${{ matrix.env.tf_working_dir }}
        run: terraform output codedeploy_deployment_group_name

      - name: Get CD Appspec File
        id: cd-appspec-file
        working-directory: ${{ matrix.env.tf_working_dir }}
        run: terraform output codedeploy_appspec_json_file

      - name: CodeDeploy
        id: deploy
        uses: byu-oit/github-action-codedeploy@v1
        with:
          application-name: ${{ steps.cd-app-name.outputs.stdout }}
          deployment-group-name: ${{ steps.cd-group-name.outputs.stdout }}
          appspec-file: ${{ steps.cd-appspec-file.outputs.stdout }}

      - name: End Standard Change
        uses: byu-oit/github-action-end-standard-change@v1
        if: always() && steps.start-standard-change.outcome == 'success' # Run if RFC started, even if the deploy failed
        with:
          client-key: ${{ secrets[matrix.env.rfc_key_name] }}
          client-secret: ${{ secrets[matrix.env.rfc_secret_name] }}
          change-sys-id: ${{ steps.start-standard-change.outputs.change-sys-id }}
          work-start: ${{ steps.start-standard-change.outputs.work-start }}
          success: ${{ job.status == 'success' }}

      - name: Send Slack Notification
        uses: byu-oit/github-action-slack@v1
        if: always()
        with:
          status: ${{ job.status }}
          channel: ${{ matrix.env.slack_channel }}
          webhook-url: ${{ secrets.slack_webhook_url }}
