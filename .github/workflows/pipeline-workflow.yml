name: Dev CI/CD Pipeline

on:
  push:
    branches: [ dev ]
env:
  tf_version: '0.12.24'
  tf_working_dir: './terraform-iac/dev/app'
  template_id: 'Codepipeline-Standard-Change'

jobs:

  build_and_deploy:
    name: Build and deploy Lambda API to dev
    runs-on: ubuntu-latest
    steps:

    - name: Check out
      uses: actions/checkout@v2

    - name: Disallow Concurrent Runs
      uses: ./.github/actions/disallow-concurrent-runs
      with:
        token: ${{ github.token }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.byu_oit_terraform_dev_key }}
        aws-secret-access-key: ${{ secrets.byu_oit_terraform_dev_secret }}
        aws-region: us-west-2

    - name: Build App Lambda
      working-directory: src
      run: |
        npm install
        zip -r lambda.zip *

    - name: Build Test Lambda
      working-directory: tst/codedeploy-hooks/after-allow-test-traffic
      run: |
        npm install
        cp -R ../../../.postman .
        zip -r lambda.zip *

    - name: 'Terraform Setup'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.tf_version }}

    - name: 'Terraform Init'
      working-directory: ${{ env.tf_working_dir }}
      run: terraform init

    # TODO: Add step to fetch currently deployed lambda version

    # TODO: Pass currently deployed lambda version into plan
    - name: 'Terraform Plan'
      working-directory: ${{ env.tf_working_dir }}
      run: terraform plan -out=plan

    - name: Start Standard Change
      uses: ./.github/actions/start-standard-change
      id: start-standard-change
      with:
        client-key: ${{ secrets.standard_change_sandbox_client_key }}
        client-secret: ${{ secrets.standard_change_sandbox_client_secret }}
        template-id: ${{ env.template_id }}

    # TODO: Pass currently deployed lambda version into apply
    - name: 'Terraform Apply'
      working-directory: ${{ env.tf_working_dir }}
      run: terraform apply plan

    - name: 'CodeDeploy'
      id: deploy
      uses: ./.github/actions/codedeploy
      with:
        application-name: hw-lambda-api-dev-cd
        deployment-group-name: hw-lambda-api-dev-dg
        appspec-file: ${{ env.tf_working_dir }}/appspec.json

    - name: End Standard Change
      uses: ./.github/actions/end-standard-change
      if: ${{ always() && steps.start-standard-change.outcome == 'success' }} # Run if RFC started, even if the deploy failed
      with:
        client-key: ${{ secrets.standard_change_sandbox_client_key }}
        client-secret: ${{ secrets.standard_change_sandbox_client_secret }}
        change-sys-id: ${{ steps.start-standard-change.outputs.change-sys-id }}
        work-start: ${{ steps.start-standard-change.outputs.work-start }}
        success: ${{ steps.deploy.outcome == 'success' }}

    - name: Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow # selectable (default: repo,message)
        channel: C0AGQEZMF #slack-bot-testing
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_url }} # required
      if: always() # Pick up events even if the job fails or is canceled.
